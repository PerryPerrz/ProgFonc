Exercice 1 : 
1. 
let incr x = x + 1;;
let incr = fun x -> x + 1;;

2.  
let avg x y = (x + y) / 2 ;;
let avg = fun x y -> (x + y) / 2;;
ou 
let avg = fun x -> fun y -> (x + y) / 2;;

3.
(avg 2) 6;;

Exercice 2 :

let flip f = fun x y -> f y x;;
let flip f = fun x -> fun y -> f y x;;

Exercice 3 : 

let rec fact x = if x = 0 then 1 else x * fact(x - 1);

Récu terminale : 

let rec fact_aux x a = if x = 0 then a else fact(a * x) (x - 1) ;

//On passe par la vraie fonction pour éviter de demander x et a à l'user.

let fact x = 
	let rec fact_aux a i = if i = 0 then a else fact_aux(a * i) (i - 1)
	in //On définit cette fonction dans l'appel qui suit.
	fact_aux 1 x;;
On start l'accu à 1 est on passe x en param à fact_aux.

Exercice 4 :
1.
n modif : on change son nom en i
let series f n = 
	let rec series_aux a f i  = if i < 0 then a else series_aux(a + f i) f (i - 1)
	in
	series_aux 0 f n;;

Sachant que l'on change pas f dans la fonction auxiliaire, on peut l'enlever.

let series f n = 
	let rec series_aux a i  = if i < 0 then a else series_aux(a + f i) (i - 1)
	in
	series_aux 0 n;;

2.
idée : n fois f(y)
let iter f n y = 
	let rec iter_aux a i = if i <= 0 then a else iter_aux(f a) (i - 1)
	in
	iter_aux y n;;
//On init l'accu à y : pour n = 2, ça fait a = y, a= f(y), a= f(f(y))

3.
let add a b = iter incr a b;; //On fait a fois l'incrémentation de b

Exercice 5 :
1. let fibo n = 
	if n < 0 then 0 else 
		if n = 0
			then 1
		else
			if n = 1 
				then 1
			else 
				fibo (n-1) + fibo (n-2);

2. let fibo n = 
	if n < 0 then 0 else //On check si n est positif
	let rec fibo_aux a1 a2 i = if i > n then a1 else fibo_aux(a1+a2) a1 (i + 1)
	in 
	fibo_aux 1 1 2;;
//On commence à l'itération 2 de fibo, à et 1 sont des cas particulier.

3.




