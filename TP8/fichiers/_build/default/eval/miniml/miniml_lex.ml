# 1 "eval/miniml/miniml_lex.mll"
 
  open Miniml_parse ;; (* need access to parser's token definitions *)

  let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl

  let keyword_table = 
    create_hashtable 8 [
		       ("if", IF);
		       ("in", IN);
		       ("then", THEN);
		       ("else", ELSE);
		       ("let", LET);
		       ("raise", RAISE);
		       ("try", TRY);
		       ("with", WITH);
		       ("match", MATCH);
		       ("rec", REC);
		       ("true", TRUE);
		       ("false", FALSE);
		       ("fun", FUNCTION);
		       ("tee", BUILTIN "tee");
		       ("len", BUILTIN "len");
		       ("ref", BUILTIN "ref");
		       ("fst", BUILTIN "fst");
		       ("snd", BUILTIN "snd");
		       ("print_int", BUILTIN "print_int");
           ("print_expr", BUILTIN "print_expr");
		       ("print_string", BUILTIN "print_string");
		       ("ignore", BUILTIN "ignore");
		     ]
		     

# 38 "eval/miniml/miniml_lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\230\255\231\255\232\255\002\000\235\255\236\255\237\255\
    \238\255\239\255\241\255\242\255\243\255\244\255\005\000\247\255\
    \248\255\002\000\250\255\251\255\252\255\001\000\030\000\019\000\
    \253\255\249\255\245\255\246\255\234\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\015\000\255\255\255\255\255\255\255\255\001\000\000\000\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\021\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\010\000\021\000\024\000\000\000\000\000\000\000\000\000\
    \008\000\006\000\009\000\011\000\005\000\017\000\016\000\000\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\014\000\015\000\019\000\020\000\018\000\027\000\
    \025\000\000\000\026\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\000\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \000\000\000\000\000\000\004\000\000\000\003\000\007\000\028\000\
    \000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\000\000\012\000\022\000\013\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\021\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
    \017\000\255\255\014\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\255\255\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\004\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\022\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 43 "eval/miniml/miniml_lex.mll"
              inum
# 151 "eval/miniml/miniml_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "eval/miniml/miniml_lex.mll"
   ( let num = int_of_string inum in
	  INT num
	)
# 157 "eval/miniml/miniml_lex.ml"

  | 1 ->
let
# 47 "eval/miniml/miniml_lex.mll"
          word
# 163 "eval/miniml/miniml_lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "eval/miniml/miniml_lex.mll"
   ( try
	    let token = Hashtbl.find keyword_table word in
	    token 
	  with Not_found ->
	    ID word
	)
# 172 "eval/miniml/miniml_lex.ml"

  | 2 ->
let
# 54 "eval/miniml/miniml_lex.mll"
                    s
# 178 "eval/miniml/miniml_lex.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 54 "eval/miniml/miniml_lex.mll"
                           ( STRING s )
# 182 "eval/miniml/miniml_lex.ml"

  | 3 ->
# 55 "eval/miniml/miniml_lex.mll"
        ( EQUALS )
# 187 "eval/miniml/miniml_lex.ml"

  | 4 ->
# 56 "eval/miniml/miniml_lex.mll"
        ( LESSTHAN )
# 192 "eval/miniml/miniml_lex.ml"

  | 5 ->
# 57 "eval/miniml/miniml_lex.mll"
        ( GREATERTHAN )
# 197 "eval/miniml/miniml_lex.ml"

  | 6 ->
# 58 "eval/miniml/miniml_lex.mll"
         ( ARROW )
# 202 "eval/miniml/miniml_lex.ml"

  | 7 ->
# 59 "eval/miniml/miniml_lex.mll"
        ( DOT )
# 207 "eval/miniml/miniml_lex.ml"

  | 8 ->
# 60 "eval/miniml/miniml_lex.mll"
        ( SEMICOLON )
# 212 "eval/miniml/miniml_lex.ml"

  | 9 ->
# 61 "eval/miniml/miniml_lex.mll"
         ( COLONCOLON )
# 217 "eval/miniml/miniml_lex.ml"

  | 10 ->
# 62 "eval/miniml/miniml_lex.mll"
         ( COLONEQUAL )
# 222 "eval/miniml/miniml_lex.ml"

  | 11 ->
# 63 "eval/miniml/miniml_lex.mll"
        ( NEG )
# 227 "eval/miniml/miniml_lex.ml"

  | 12 ->
# 64 "eval/miniml/miniml_lex.mll"
        ( PIPE )
# 232 "eval/miniml/miniml_lex.ml"

  | 13 ->
# 65 "eval/miniml/miniml_lex.mll"
        ( PLUS )
# 237 "eval/miniml/miniml_lex.ml"

  | 14 ->
# 66 "eval/miniml/miniml_lex.mll"
        ( BANG )
# 242 "eval/miniml/miniml_lex.ml"

  | 15 ->
# 67 "eval/miniml/miniml_lex.mll"
        ( MINUS )
# 247 "eval/miniml/miniml_lex.ml"

  | 16 ->
# 68 "eval/miniml/miniml_lex.mll"
        ( TIMES )
# 252 "eval/miniml/miniml_lex.ml"

  | 17 ->
# 69 "eval/miniml/miniml_lex.mll"
        ( OPEN )
# 257 "eval/miniml/miniml_lex.ml"

  | 18 ->
# 70 "eval/miniml/miniml_lex.mll"
        ( CARET )
# 262 "eval/miniml/miniml_lex.ml"

  | 19 ->
# 71 "eval/miniml/miniml_lex.mll"
        ( CLOSE )
# 267 "eval/miniml/miniml_lex.ml"

  | 20 ->
# 72 "eval/miniml/miniml_lex.mll"
        ( COMMA )
# 272 "eval/miniml/miniml_lex.ml"

  | 21 ->
# 73 "eval/miniml/miniml_lex.mll"
         ( EMPTYLIST )
# 277 "eval/miniml/miniml_lex.ml"

  | 22 ->
# 74 "eval/miniml/miniml_lex.mll"
        ( LBRACKET )
# 282 "eval/miniml/miniml_lex.ml"

  | 23 ->
# 75 "eval/miniml/miniml_lex.mll"
        ( RBRACKET )
# 287 "eval/miniml/miniml_lex.ml"

  | 24 ->
# 76 "eval/miniml/miniml_lex.mll"
                    ( token lexbuf )
# 292 "eval/miniml/miniml_lex.ml"

  | 25 ->
# 78 "eval/miniml/miniml_lex.mll"
        ( EOF )
# 297 "eval/miniml/miniml_lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

